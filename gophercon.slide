Tecnologia Go: direto da GopherCon 2024
04 Junho

Giácomo Quinalia 
giacomo.quinalia@ixcsoft.com.br

Bruno Spolavori
bruno.spolavori@ixcsoft.com.br

* Acesse: bit.ly/goixc
.image images/bit.ly_goixc.png 500 500

: START 1
* GopherCon Brasil

- Florianópolis, 09 e 10 de Maio
- Mais de 1000 participantes
- Desde 2016
- Tema: diversidade
- Workshop com Wesley Willians

.image images/gophercon_br.png 300 700

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.caption por [[https://www.youtube.com/watch?v=Ki69rMAnkv4][Wesley Willians]]

"Go não é apenas uma linguagem de programação. É uma plataforma completa de ponta a ponta para a construção de sistemas para produção." - Camaron Balahan

- Testes
- Formatação (gopls)
- Gerenciamento de dependências nativo
- Profiling
- Segurança
- Multiplataforma
- go <comando>
- Promessa de compatibilidade: nunca haverá a versão 2.0

.html html/4

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem

Mais receita, Menos custos, Menos riscos.

Empresas precisam escalar suas operações

- *Extrema* *performance*

Velocidade na entrega de suas soluções

- *Foco* *na* *simplicidade*

Economizar com infraestrutura

- *Eficiência* *no* *consumo* *dos* *recursos*

Necessidade de aplicações seguras

- *Recursos* *de* *segurança* *nativos*

.html html/5.html

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
Plataforma na versão atual: *1.22*
.image images/go_complete_platform.png 400 900

: .image images/go_is.png 450 1000

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/companies_using_go.png 500 1000

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
Evolução das linguagens no Mercado Livre no período de 2019 a 2023
: 30000 microservices e mais de 100 milhoes de requisicoes por minuto
.image images/mercado_livre_languages_predict.png 500 840

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/total_go_users.png

: * Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
: .image images/expect_use_languages.png 600 800

: *
: .background images/last_year_languages_used.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/users_satisfaction.png 400 900
.html users_satisfaction.html

: * Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
: .image images/jetbrains_salary_trends.png 600 900

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/language_comparison_1.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/language_comparison_2.png
: Development costs: fácil de manter, o desenvolvimento é rápido
: Operating costs: infraestrutura, go gera um binário apenas, eficiência no uso de recursos.

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/language_comparison_3.png

: * Perguntas?
: .image images/any_questions_2.png
: END 1
: START 2
* Comparando Threads: Threads convencionais vs a inovação de Go
.caption por [[https://youtu.be/ve4PRlUw7Io?si=zs2SZa1gUZkrvSHC][Ana Gabriela Franco]]

 - Syscall
 - Scheduler
 - Troca de contexto, atualiza registradores com dados da memoria
 - Custa aproximadamente 4MB de ram
.background images/multithread.png  

* Comparando Threads: Threads convencionais vs a inovação de Go
.caption por [[https://youtu.be/ve4PRlUw7Io?si=zs2SZa1gUZkrvSHC][Ana Gabriela Franco]]
Inovação de Go: *Goroutines*

- Conceitualmente similares a threads de kernel gerenciadas pelo SO, porém *gerenciadas* *inteiramente* *pelo* *runtime* *do* *Go*
- Mais leves e baratas que threads de kernel: 2KB
- Alta concorrência
- Aproveitar o paralelismo: escalar para N cores
- GopherCon 2018: Kavya Joshi - The Scheduler Saga

.html html/15.html
: END 2
: START 3
* Encrypt, Decrypt and Sign data using Go
.caption por [[https://youtu.be/wf9jVKLRsKo?si=nxoy1RCZzeFjZtlP][Rafael Escrich]]

Hash:

- Determinístico
- Efeito avalanche
- Perda de dados
- Rápido

.background images/hash.png

.play crypto/hash.go /^//START/,/^//END/


* Encrypt, Decrypt and Sign data using Go
.caption por [[https://youtu.be/wf9jVKLRsKo?si=nxoy1RCZzeFjZtlP][Rafael Escrich]]
Chave Simétrica:

- Mesma chave encripta e desencripta

 AES
 DES
 Twofish
.play crypto/asimetric.go /^//START/,/^//END/

* Encrypt, Decrypt and Sign data using Go
.caption por [[https://youtu.be/wf9jVKLRsKo?si=nxoy1RCZzeFjZtlP][Rafael Escrich]]
Chave Assimétrica:

- Par de chaves, números primos (RSA) ou curva elíptica (ECC)
- Uma chave privada e uma chave Publica
- Assinar um dado
- Encriptar um dado
.play crypto/asimetric.go /^//START/,/^//END/
: END 3
: START 4
* Padrões de Concorrência em Go
.caption por [[https://www.youtube.com/watch?v=ajsxiMPazT8][Cássio Botaro]]

Nivelamento: concorrência X paralelismo

Concorrência

- É a capacidade de *lidar* múltiplas coisas simultaneamente

Paralelismo

- É a capacidade de *fazer* múltiplas coisas simultaneamente

Mundo real: paralelismo COM concorrência

.html html/17.html

* Padrões de Concorrência em Go

Como Go trabalha com concorrência?

- Goroutines: funções de execução independente
- Channels: um channel em Go fornece uma conexão entre goroutines, permitindo que se comuniquem

.play concurrency_patterns_basic.go /^//START/,/^//END/

: Don't communicate by sharing memory, share memory by communicating.

.html html/48.html

* Padrões de Concorrência em Go
*Generator* *pattern*: gera uma sequencia de valores que são usados para produzir alguma saída.
.play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

* Padrões de Concorrência em Go
*Worker* *group*: funções que esperam entradas para realizar um trabalho
.play concurrency_patterns_worker_group_pattern.go /^//START/,/^//END/

* Padrões de Concorrência em Go

    func worker(id int, in <-chan int64, out chan<- int64, wg *sync.WaitGroup) {
        for v := range in {
            fmt.Printf("Worker %d está processando o valor %d\n", id, v)
            time.Sleep(time.Duration(rand.Intn(1e3)) * time.Millisecond)
            out <- v
        }
        wg.Done()
    }

* Padrões de Concorrência em Go
*Pipelines*: uma função escreve um valor em uma saída que é a entrada de outra função
.play concurrency_patterns_pipeline_pattern.go /^//START/,/^//END/

* Padrões de Concorrência em Go
*Fan-In*: processar múltiplas entradas e combinar em uma saída
.play concurrency_patterns_fanin_pattern.go /^//START/,/^//END/

: * Padrões de Concorrência em Go
: *Fan-In*: processar múltiplas entradas e combinar em uma saída

:    func generator(msg string) <-chan string {
:        input := make(chan string)
:        go func() {
:            for i := 0; ; i++ {
:                input <- fmt.Sprintf("%s %d", msg, i)
:                time.Sleep(time.Duration(rand.Intn(1e3)) * time.Millisecond)
:            }
:        }()
:        return input
:    }

* Padrões de Concorrência em Go
*Fan-Out*:
.play concurrency_patterns_fanout_pattern.go /^//START/,/^//END/

: * Padrões de Concorrência em Go
:
:    func worker(id int, in <-chan int, wg *sync.WaitGroup) {
:        for v := range in {
:            fmt.Printf("Worker %d está processando o valor %d\n", id, v)
:        }
:        wg.Done()
:    }
:    func sequence(start, end int) <-chan int {
:        input := make(chan int)
:        go func() {
:            for i := start; i <= end; i++ {
:                input <- i
:            }
:            close(input)
:        }()
:        return input
:    }
:    func publish(output chan<- int, value int, wg *sync.WaitGroup) {
:        select {
:        case output <- value:
:        case <-time.After(1 * time.Second):
:        }
:        wg.Done()
:    }

* Padrões de Concorrência em Go
*Sistema* *de* *Ticket*: usado para controlar quando um determinado trabalho pode ser executado
: exemplo de rating limit
: existem api gatweays em go que usam esse algoritimo
.play concurrency_patterns_ticket_pattern.go /^//START/,/^//END/

* Padrões de Concorrência em Go

    func boxOffice(tickets chan<- Ticket, timeout time.Duration, nTickets int) {
        for {
            for i := 0; i < nTickets; i++ {
                tickets <- Ticket(i)
            }

            // espera até que mais tickets possam ser emitidos
            <-time.After(timeout)
        }
    }


    func worker(tickets <-chan Ticket, work <-chan Work) {
        for w := range work {
            <-tickets // espera por um ticket
            w()       // executa um trabalho
        }
    }

: * Janela Deslizante
: .play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

: * Processamento em Lote
: .play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

: END 4
: START 5

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
    Aproximadamente 2200 clientes com 6000 câmeras apontadas para a rua
    2000 câmeras internas. Totalizando 190.000 usuários finais.

- Desafios semelhantes aos nossos, porem com hardware proprietário
- OpenWRT
- Estudaram o uso de C, C++, Rust, Python (Interpletado e Compilado) e Lua
.image images/Embarcados_linguagens.jpg
 
* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
.image images/Embarcados_FirstSetup.jpg

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
.image images/Embarcados_FinalSetup.jpg

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
.image images/Embarcados_Hardware.jpg 500 1000

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]

Problemas:

- Restrições de Hardware
- Problemas com os Chineses (API, Documentação)
- Converter RTSP para WebRTC
- Monitoramento & Tunelamento 

.background images/gopher_sad.png

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]

Soluções com Go:

- Go Routines
- Channels
- Implementa protocolos de comunicação baixo nível
- Fácil de compilar
- Tem cara de C

.html html/gopher_happy.html

* GoIoT: Inovando na Conectividade com Go e Dispositivos Inteligentes
.caption por [[https://www.youtube.com/watch?v=ICqv5jJYLEA][Rafael Mateus]]

    Experiência com IoT na Indústria, dosagem química, leitura de sensores, Modbus, EtherCAT

Vantagens:

- Concorrência nativa (Go routines e Channels)
- Baixo consumo de Recursos
- Fácil de compilar o mesmo código em diversos processadores
- Periph.io
.html html/gopher_periph.html


* GoIoT: Inovando na Conectividade com Go e Dispositivos Inteligentes
.caption por [[https://www.youtube.com/watch?v=ICqv5jJYLEA&][Rafael Mateus]]

.image images/tinygo.png

- Plataforma Go para desenvolvimento em embarcados
- Compila para microprocessadores, PIC, AVR (Arduino), GBA
- Implementa nativamente Protocolos de comunicação de baixo nível, I2C, SPI, UART
- Tem ferramentas para realizar o flash nos dispositivos suportados

* GoIoT: Inovando na Conectividade com Go e Dispositivos Inteligentes
.caption por [[https://www.youtube.com/watch?v=ICqv5jJYLEA&][Rafael Mateus]]
 
Hello World

- Golang > 1.9Mb 
- TinyGo > 251Mb

Hello World sem debugger

- Golang > 837Kb 
- TinyGo > 10Kb

.html html/gopher_super.html
: END 5
: START 6
* Profile-Guided Optimization (PGO)
.caption por [[https://www.youtube.com/watch?v=V2LSnbvylz4][Alex Rios]]

Técnica de otimização do compilador

- CPU profiling & Memory profiling
- Visualização pelo browser e terminal
- Destinado para ambiente de produção
: workload é a quantidade de trabalho em um período de tempo
- *2-14%* em melhora de performance

Como aplicar o PGO?

*1.* Compilar e lançar um binário inicial (sem PGO).
*2.* Coletar profile de ambiente de produção.
*3.* Quando chegar a hora de lançar um binário atualizado, compilar a partir da fonte mais recente e fornecer o profile de produção.
*4.* Voltar ao passo 2

.html html/34.html

* Profile-Guided Optimization (PGO)

*runtime/pprof*
Quando você deseja iniciar e parar a criação de profiling programaticamente e quando precisar de mais controle sobre o processo de criação de profiling. 

    package main

    import "runtime/pprof"

    func main() {
        f, err := os.Create("cpu-profile.pprof")
        if err != nil {
            fmt.Println("Tratem os erros :)", err)
            return
        }
        
        pprof.StartCPUProfile(f)
        defer pprof.StopCPUProfile()

        someWork()
    }

* Profile-Guided Optimization (PGO)

*net/http/pprof*
Quando desejar ativar o profiling sob demanda da sua aplicação em execução por meio de um servidor HTTP. 

    package main
    
    import (
        "net/http"
        _ "net/http/pprof"
    )

    func main() {
        f, err := os.Create("cpu-profile.pprof")
        if err != nil {
            fmt.Println("Tratem os erros :)", err)
            return
        }
        
        pprof.StartCPUProfile(f)
        defer pprof.StopCPUProfile()

        http.ListenAndServe(":8090", nil)
    }

* Profile-Guided Optimization (PGO)
Inlining hot functions

:
    func add(a, b int) int {
        return a + b
    }

    func main() {
        c := add(1, 2)
    }
:
    func main() {
        a := 1
        b := 2
        c := a + b
    }
:
    func main() {
        c := 1 + 2 // constant propagation
    }
:
    func main() {
        c := 3 // constant folding
    }

* Profile-Guided Optimization (PGO)
*Escape* *analysis*: a referência para um objeto "escapa" da função?

*Heap*: pode armazenar qualquer coisa. Garbage collector cuida da memória.
*Stack*: cresce a cada chamada, encolhe a retorno.

    type Foo struct { a, b int }

    func NewFoo(a, b int) *Foo {
        return &Foo{a: a, b: b}
    }

    func Compute() int {
        f := NewFoo(1, 2) // &Foo{a: 1, b: 2} 
        c := f.a + f.b
        return c
    }

.html html/41.html


* Profile-Guided Optimization (PGO)
Devirtualization

    type Reader interface {
        Read(p []byte) (n int, err error)
    }
:
    func main() {
        file, _ := os.Open("foo.txt")
        var reader io.Reader = file
        reader.Read(b)
    }
:
    ...
    
    if file, ok := reader.(*os.File); ok {
        file.Read(b)
    } else {
        reader.Read(b)
    }

: O que *não* invalida o profile?
: - Alterações em um arquivo fora de uma hot function
: - Mover uma função para outro arquivo do *mesmo* *package*
: O que *invalida* o profile?
: - Mudanças dentro de uma hot function
: - Renomear uma função
: - Mover uma função para outro pacote

: .background images/background.png
: .image images/ladder.svg

: * Perguntas? 
: .image images/any_questions_4.gif

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global
.caption por [[https://www.youtube.com/watch?v=1YU0GTF6EaU][Rodrigo Brito]]

Pesquisa: Um filme do Arnold Shuazineguer

- *Stop* *words*: Remoção de termos neutros
- *Normalização*: Normalizar capitalização, acentuação, etc
- *Tokenização*: Tokenização de conteúdo textual
- *Fuzziness*: similaridade de conteúdo

.image images/gopher_searching.png 300 400

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Index invertido

.image images/inverted_index.png 450 850

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Postgres tsvector

    ALTER TABLE movies ADD COLUMN ts_title tsvector
    GENERATED ALWAYS AS (to_tsvector('english', title))
    STORED;

GIN = Generalized Inverted Index

    CREATE INDEX ts_idx ON movies USING GIN (ts_title)
:
Query:

    SELECT to_tsvector('portuguese', 'um filme do arnold')

Resultado:

    'arnold': 4 'film': 2


* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

BleveSearch - A modern text/numeric/geo-spatial/vector indexing library for Go
: .image images/blevesearch.png

Mapeamento de campos de tipo dinâmicos

    mapping := bleve.NewIndexMapping()

    index, err := bleve.New("index.bleve", mapping)
    index, err := bleve.NewMemOnly(mapping)

Mapeamento

    document := bleve.NewDocumentMapping()

    field := bleve.NewTextFieldMapping()
    field.Analyser = "en"
    document.AddFieldMappingsAt("title", field)

    field.Index = false // armazena, mas não indexa
    field.Store = false // não armazena, mas indexa

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Index

    type Movie struct {
        Title       string `json:"title"`
        Description string `json:"description"`
    }

    err := index.Index("star-wars", Movie{
        Title:       "Star wars",
        Description: "A long time ago in a galaxy...",
    })

Tipos de busca

    bleve.NewPhraseQuery("arnold schwarzenegger")
    bleve.NewMatchQuery("arnold")
    bleve.NewPrefixQuery("arnold")
    bleve.NewQueryStringQuery("arnold")
    bleve.NewFuzzyQuery("arnoud")
    bleve.NewGeoDistanceQuery(lt, ln, "1km")

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Busca

    query := bleve.NewFuzzyQuery("arnold")
    searchRequest := bleve.NewSearchRequest(query)
    results, _ := index.Search(searchRequest)
    for _, result := range results {
        // manipular os resultados (map[string]interface)
    }

.html html/gopher_abduction.html


* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

E se eu tiver MILHÕES/BILHÕES de registros?

- Problemas de escrita X leitura
- Limitação física

.image images/search_engines.png 350 700

: * Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

: 80% Infraestrutura, 15% Experimentação, 5%  Código
: Analisadores complexos demandam processamento 💸

: .image images/sharding.png

* Resolvendo Desafios de Live Streaming em Go
.caption por [[https://youtu.be/7gVrMCY40yQ?si=-jAYvXTP_KD8YLCz][Laís Lima e Isabella Mariz]]

Streaming On Demand

- Empacotamento do Video
- Taxa de bits adaptativa
- Múltiplos canais de áudio
- Inserção dinâmica de anúncios
- Armazenamento distribuído de arquivos pré-processados
.image images/Streaming.jpg 210 1000

* Resolvendo Desafios de Live Streaming em Go
.caption por [[https://youtu.be/7gVrMCY40yQ?si=-jAYvXTP_KD8YLCz][Laís Lima e Isabella Mariz]]

Live Streaming

- Empacotamento em tempo real
- Legendas em tempo real
- Regras de negócio em tempo real
- Diversas programações com regras de negócio diferentes
- Latência, bit rate
- Geolocalização

 Gopher play

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
.caption por [[https://www.youtube.com/watch?v=xszQjCqLX6w][André Leoni]]

Logs estruturados com slog

- Performance
- Uso de memória
- Extensibilidade

Projetos mais populares:

- sirupsen/logrus (24.2k⭐️)
- uber-go/zap (21.1k⭐️) 
- rs/zerolog (10k⭐️)

.html html/16.html

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Arquitetura
.image images/slog_arch_1.png 450 900

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Arquitetura
.image images/slog_arch_2.png 450 900

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Arquitetura
.image images/slog_arch_3.png 450 900

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Níveis

    const (
        LevelDebug Level = -4
        LevelInfo  Level = 0
        LevelWarn  Level = 4
        LevelError Level = 8
    )

- Levels são inteiros
- Espaços para que possa ser criado levels customizados
- Info é o nível padrão

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Text handler
.play text_logger.go /^//START/,/^//END/

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
JSON handler
.play json_logger.go /^//START/,/^//END/

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
With
.play logger_with.go /^//START/,/^//END/

: * Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
: Group
: .play logger_group.go /^//START/,/^//END/

: * Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
: .image images/slog_zap.png 500 900

* Mitigando CVEs de aplicações Golang em produção
.caption por [[https://youtu.be/dFfnVehb5TQ?si=XmZxzBvqwWaZ2t_3][Amim Knabben e Juliana Gaioso]]

- Weakness, Platform & Vulnerability (CWE, CVE, CPE)
- Métodos de pontuação, CVSS & EPSS
- Software Bill Of Materials (SBOM)
- SLSA & GitOps
.image images/gopher_hacker.png 300 400

* Mitigando CVEs de aplicações Golang em produção
.caption por [[https://youtu.be/dFfnVehb5TQ?si=XmZxzBvqwWaZ2t_3][Amim Knabben e Juliana Gaioso]]

Software Suply Chain

- Verificação de vulnerabilidades durante toda a cadeia de desenvolvimento
- Registries
- Bibliotecas externas
- Ambiente de desenvolvimento
- Ambiente de build

Golang já possui SBOM

* Escolhendo (ou não) o melhor ORM para o seu projeto

ORM é uma técnica que apresenta uma ponte entre os objetos do nosso domínio e tabelas de dados relacionais, como o Postgres e MySQL.

Alguns fatores podem influenciar na decisão de adotar ou não uma ferramenta de ORM em um projeto.

- Escopo
- Criticidade
- Prazo de entrega
- Volume de dados a serem processados

.html html/orm2.html

* Escolhendo (ou não) o melhor ORM para o seu projeto

*Vantagens*

- Produtividade
- Developer-friendly
- Mecanismos que ajudam a mitigar problemas de segurança
- Suporte a diferentes bases de dados

*Desvantagens*

- Condicionam o uso de SELECT * FROM
- Menos controle
- Curva de aprendizado da ferramenta
- SQL não é uma sub-linguagem
- Falta de flexibilidade para atender queries complexas
- A ferramenta de ORM também pode ser burlada

.html html/orm.html

* Escolhendo (ou não) o melhor ORM para o seu projeto

Escrita e execução de queries nativas

- database/sql
- pgx

SQL builders e SQL-First ORMs

- bun
- squirrel

Code-first ORMs

- gorm
- ent

Geradores de código Go a partir de queries SQL

- sqlc

* Outras palestras
https://gopherconbr.org

- Go CLIs além do óbvio - Matheus Mina
- Serviços que Fofocam: Desvendando a Magia do Serf em Go - Geovani de Souza
- Painel Go e Mercado - FullCycle, Mercado Livre, Nearsure, Transfeera
- Como estruturar um projeto Go - Tiago Temporin
- Criando um gerador de código para qualquer projeto com GO + Embed - Vinícius Boscardin
- Go no browser: WebAssembly em ação - Alexandre Cabral
- Lighting Talks
- Hexagonal, Clean Architecture ou Domain-Driven Design? - Rodrigo Branas