Gophercon Brasil 2024
04 Junho

Giácomo Quinalia 
giacomo.quinalia@gmail.com

Bruno Spolavori
bruno.spolavori@ixcsoft.com.br

* bit.ly/ixcgo
.image images/bit.ly_ixcgo.png 600 600

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.caption por [[https://www.youtube.com/watch?v=Ki69rMAnkv4][Wesley Willians]]

Não apenas uma linguagem: uma plataforma end-to-end.

- Promessa de compatibilidade: nunca haverá a versão 2.0
- Testes
- Formatação
- Gerenciamento de dependências nativo
- Profiling
- Segurança
- go command

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem

Mais receita, Menos custos, Menos riscos.

Empresas precisam escalar suas operações

- *performance*

Velocidade na entrega de suas soluções

- *simplicidade*

Economizar com infraestrutura

- *eficiência*

Necessidade de aplicações seguras

- *segurança*

: Projetos open-source usando Go

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/go_is.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/companies_using_go_1.png 200 700
.image images/cloud__and_open_source.png 300 800

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
Mercado livre
.image images/mercado_livre_languages_stats.png 500 850

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
Mercado livre
.image images/mercado_livre_languages_predict.png 540 840

: * Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
: .image images/go_complete_platform.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/total_go_users.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/expect_use_languages.png 600 800

*
.background images/last_year_languages_used.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/users_satisfaction.png 400 900
.html users_satisfaction.html

: * Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
: .image images/jetbrains_salary_trends.png 600 900

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/language_comparison_1.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/language_comparison_2.png

* Go no Mundo Real: Empresas, Carreiras e Futuro da Linguagem
.image images/language_comparison_3.png

* Perguntas?
.image images/any_questions_2.png

* Comparando Threads: Threads convencionais vs a inovação de Go

Threads OS:
 - Syscall
 - Troca de contexto, atualizar registradores com dados da memoria
 - Custa aproximadamente 4MB de ram

Green Threads ou Go Routines
- Comparação entre outras linguagens e Golang 

* Perguntas?
.image images/any_questions_1.png

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
.caption por [[https://www.youtube.com/watch?v=xszQjCqLX6w][André Leoni]]

Logs estruturados com slog

- Performance
- Uso de memória
- Extensibilidade

sirupsen/logrus (23.8k⭐️)
uber-go/zap (20.5k⭐️) 
rs/zerolog (9.4k⭐️)

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Arquitetura
.image images/slog_arch_1.png 450 900

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Arquitetura
.image images/slog_arch_2.png 450 900

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Arquitetura
.image images/slog_arch_3.png 450 900

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go

Níveis

    const (
        LevelDebug Level = -4
        LevelInfo  Level = 0
        LevelWarn  Level = 4
        LevelError Level = 8
    )

- Levels são inteiros
- Espaços para que possa ser criado levels customizados
- Info é o level padrão

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Text handler
.play text_logger.go /^//START/,/^//END/

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
JSON handler
.play json_logger.go /^//START/,/^//END/

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
With
.play logger_with.go /^//START/,/^//END/

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
Group
.play logger_group.go /^//START/,/^//END/

* Conhecendo a "log/slog": A biblioteca de log da Standard Library do Go
.image images/slog_zap.png 500 900

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]

- Desafios semelhantes aos nossos com as cameras, porem com hardware proprietario
- OpenWRT
- Estudaram o uso de C, C++, Rust, Python (Interpletado e Compilado) e Lua
 
Aproximadamente 2200 clientes com 6000 câmeras apontadas para a rua
2000 câmeras internas. Totalizando 190.000 usuários finais.

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]

Problemas:
 - Restrições de Hardware
 - Problemas com os Chineses (API, Documentação)
 - Converter RTSP para WebRTC
 - Monitoramento & Tunelamento 


Suluções com Go:
 - Go Routines
 - Channels
 - Implementa protocolos de comunicação baixo nivel
 - Facil de compilar
 - Tem cara de C

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
.image images/Embarcados_FirstSetup.jpg

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
.image images/Embarcados_FinalSetup.jpg

* Uma Experiência de Desenvolvimento de Software Embarcado com GoLang
.caption por [[https://youtu.be/FSK-i0goCGs?si=A14UxTUjgk0Sl1re][Matheus Deodato]]
.image images/Embarcados_Hardware.jpg

* GoIoT: Inovando na Conectividade com Go e Dispositivos Inteligentes
.caption por [[https://www.youtube.com/watch?v=ICqv5jJYLEA][Rafael Mateus]]


    Experiência com IoT na Industria, Modbus, EtherCAT

Vantagens:
 - Concorrencia nativa (Go routines e Channels)
 - Baixo consumo de Recursos
 - Facil de compilar o mesmo codigo em diversos processadores
 - Periph.io



* GoIoT: Inovando na Conectividade com Go e Dispositivos Inteligentes
.caption por [[https://www.youtube.com/watch?v=ICqv5jJYLEA&][Rafael Mateus]]

.image images/tinygo.png
TinyGo:
 - Plataforma Go para desenvolvimento em embarcados
 - Compila para microprocessadores, PIC, AVR (Arduino), GBA
 - Implementa nativamente Protocolos de comunicação de baixo nivel, I2C, SPI, UART
 - Tem ferramentas para realizar o flash nos dispositivos suportados

* GoIoT: Inovando na Conectividade com Go e Dispositivos Inteligentes
.caption por [[https://www.youtube.com/watch?v=ICqv5jJYLEA&][Rafael Mateus]]
 
Hello World
 - Golang > 1.9Mb 
 - TinyGo > 251Mb

Hello World sem debugger
 - Golang > 837Kb 
 - TinyGo > 10Kb

E é possivel reduzir mais!

* Serviços que Fofocam: Desvendando a Magia do Serf em Go

    O Problema:
    Resolver a resolução de nomes na borda da Vercel em 10ms

- Serf, protolo da hashcorp, para gossip
- DNS distribuido
- Golang

* Resolvendo Desafios de Live Streaming em Go

Streaming
- Encodificação do Video
- Inserção dinamica de anúncios
- Armazenamento distribuído de arquivos pré-processados


Live streaming
- Encodificação em tempo real
- Legendas em tempo real
- Regras de negocio em tempo real
- Diversas programações com regras de negocio diferentes
- Latencia, bit rate 

    Gopher play

* Mitigando CVEs de aplicações Golang em produção
.caption por [[https://youtu.be/dFfnVehb5TQ?si=XmZxzBvqwWaZ2t_3][Amim Knabben e Juliana Gaioso]]

- Weakness, Platform & Vulnerability (CWE, CVE, CPE)
- Metodos de pontuação, CVSS & EPSS
- Software Bill Of Materials
- SLSA & GitOps

Software Suply Chain
- Verificação de vulnerabilidades durante toda a cadeia de desenvolvimento
- Registries
- Bibliotecas externas
- Ambiente de desenvolvimento
- Ambiente de build

Golang já possui SBOM


* Profile-Guided Optimization

Técnica de otimização do compilador

- CPU profiling & Memory profiling
- Destinado para ambiente de produção
- 2-14% em melhora de performance

Workflow

- Compilar e lançar um binário inicial (sem PGO).
- Coletar profile de ambiente de produção.
- Quando chegar a hora de lançar um binário atualizado, compilar a partir da fonte mais recente e fornecer o profile de produção.
- Voltar ao passo 2

* Profile-Guided Optimization

    package main

    import "runtime/pprof"

    func main() {
        f, err := os.Create("cpu-profile.pprof")
        if err != nil {
            fmt.Println("Tratem os erros :)", err)
            return
        }
        
        pprof.StartCPUProfile(f)
        defer pprof.StopCPUProfile()

        someWork()
    }

* Profile-Guided Optimization

    package main
    
    import (
        "net/http"
        _ "net/http/pprof"
    )

    func main() {
        f, err := os.Create("cpu-profile.pprof")
        if err != nil {
            fmt.Println("Tratem os erros :)", err)
            return
        }
        
        pprof.StartCPUProfile(f)
        defer pprof.StopCPUProfile()

        http.ListenAndServe(":8090", nil)
    }

* Profile-Guided Optimization

O que será otimizado?

- Inlining hot functions
- Devirtualization
- Escape analysis
- Block Reordering

* Profile-Guided Optimization
Inlining

:
    func add(a, b int) int {
        return a + b
    }

    func main() {
        c := add(1, 2)
    }
:
    func main() {
        a := 1
        b := 2
        c := a + b
    }
:
    func main() {
        c := 1 + 2
    }
:
    func main() {
        c := 3
    }


* Profile-Guided Optimization
Devirtualization

    type Reader interface {
        Read(p []byte) (n int, err error)
    }

    func main() {
        f, _ := os.Open("foo.txt")
        var r io.Reader = f
        r.Read(b)
    }
:
    ...
    
    if f, ok := r.(*os.File); ok {
        f.Read(b)
    } else {
        r.Read(b)
    }

* Profile-Guided Optimization
Block reordering

    if conditionA {
        // Bloco A
        // Acessado com MENOS frequência
    } else {
        // Bloco B
        // Acessado com MAIS frequência
    }

O PGO pode escolher entre negar a condição A ou testar diretamente a condição B

    if conditionB {
        // Bloco B
        // Acessado com MAIS frequência
    } else {
        // Bloco A
        // Acessado com MENOS frequência
    }

* Profile-Guided Optimization
Escape analysis


: O que *não* invalida o profile?
: - Alterações em um arquivo fora de uma hot function
: - Mover uma função para outro arquivo do *mesmo* *package*
: O que *invalida* o profile?
: - Mudanças dentro de uma hot function
: - Renomear uma função
: - Mover uma função para outro pacote

: .background images/background.png
: .image images/ladder.svg

* Perguntas? 
.image images/any_questions_4.gif

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Pesquisa: Um filme do Arnold Shuazineguer

- *Stop* *words*: Remoção de termos neutros
- *Normalização*: Normalizar capitalização, acentuação, etc
- *Tokenização*: Tokenização de conteúdo textual
- *Fuzziness*: similaridade de conteúdo

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Index invertido

.image images/inverted_index.png 450 900

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Postgres

    ALTER TABLE movies ADD COLUMN ts_title tsvector
    GENERATED ALWAYS AS (to_tsvector('english', title))
    STORED;

GIN = Generalized Inverted Index

    CREATE INDEX ts_idx ON movies USING GIN (ts_title)
:
Query:

    SELECT to_tsvector('portuguese', 'um filme do arnold')

Resultado:

    'arnold': 4 'film': 2


* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

BleveSearch
: .image images/blevesearch.png

Mapeamento de campos dinâmicos

    mapping := bleve.NewIndexMapping()
    index, err := bleve.New("index.bleve", mapping)
    index, err := bleve.NewMemOnly(mapping)

Mapeamento

    document := bleve.NewDocumentMapping()
    field := bleve.NewTextFieldMapping()
    field.Analyser = "en"
    document.AddFieldMappingsAt("title", field)

    field.Index = false // armazena, mas não indexa
    field.Store = false // não armazena, mas indexa

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Index

    type Movie struct {
        Title       string `json:"title"`
        Description string `json:"description"`
    }

    err := index.Index("star-wars", Movie{
        Title:       "Star wars",
        Description: "A long time ago in a galaxy...",
    })

Tipos de busca

    bleve.NewPhraseQuery("arnold schwarzenegger")
    bleve.NewMatchQuery("arnold")
    bleve.NewPrefixQuery("arnold")
    bleve.NewQueryStringQuery("arnold")
    bleve.NewFuzzyQuery("arnoud")
    bleve.NewGeoDistanceQuery(lt,ln,"1km")

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

Busca

    query := bleve.NewFuzzyQuery("arnold")
    searchRequest := bleve.NewSearchRequest(query)
    results, _ := index.Search(searchRequest)
    for _, result := range results {
        // manipular os resultados (map[string]interface)
    }


* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

E se eu tiver MILHÕES/BILHÕES de registros?

- Escrita X Leitura
- Limitação física

.image images/search_engines.png 350 700

* Construindo Sistemas de Busca Eficientes em Go: Da Simplicidade à Escala Global

80% Infraestrutura, 15% Experimentação, 5%  Código
Analisadores complexos demandam processamento 💸

.image images/sharding.png

* Padrões de Concorrência em Go

Como Go trabalha com concorrência?

- Goroutines
- Channels

    func main() {
        ch := make(chan string)
        
        go func() {
            ch <- "Hello, world!"
        }()

        fmt.Println(<-ch)
    }

* Generator pattern
.play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

* Worker group
.play concurrency_patterns_worker_group_pattern.go /^//START/,/^//END/

* Pipelines
.play concurrency_patterns_pipeline_pattern.go /^//START/,/^//END/

* Fan-In
.play concurrency_patterns_fanin_pattern.go /^//START/,/^//END/

* Fan-Out
.play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

* Janela Deslizante
.play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

* Processamento em Lote
.play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

* Sistema de Ticket
.play concurrency_patterns_generator_pattern.go /^//START/,/^//END/

* Escolhendo (ou não) o melhor ORM para o seu projeto

ORM é uma técnica que apresenta uma ponte entre os objetos do nosso domínio e tabelas de dados relacionais, como o Postgres e MySQL.

Alguns fatores podem influenciar na decisão de adotar ou não uma ferramenta de ORM em um projeto.

- Escopo
- Criticidade
- Prazo de entrega
- Volume de dados a serem processados

* Escolhendo (ou não) o melhor ORM para o seu projeto

Vantagens

- Produtividade
- Developer-friendly
- Mecanismos que ajudam a mitigar problemas de segurança
- Suporte a diferentes bases de dados

Desvantagens

- Condicionam o uso de SELECT * FROM
- Menos controle
- Curva de aprendizado da ferramenta
- SQL não é uma sub-linguagem
- Falta de flexibilidade para atender queries complexas
- A ferramenta de ORM também pode ser burlada

* Escolhendo (ou não) o melhor ORM para o seu projeto

Escrita e execução de queries nativas

- database/sql
- pgx

SQL builders e SQL-First ORMs

- bun
- squirrel

Code-first ORMs

- gorm
- ent

Geradores de código Go a partir de queries SQL

- sqlc

* Encrypt, Decrypt and Sign data using Go
.caption por [[https://youtu.be/wf9jVKLRsKo?si=nxoy1RCZzeFjZtlP][Rafael Escrich]]
Hash:
 - Deterministico
 - Efeito avalanche
 - Perda de dados
 - Rapido

 MD5
 SHA
 Argon2

* Encrypt, Decrypt and Sign data using Go
.caption por [[https://youtu.be/wf9jVKLRsKo?si=nxoy1RCZzeFjZtlP][Rafael Escrich]]
Chave Simetrica:
 - Mesma chave encripta e decripta

 AES
 DES
 Twofish

* Encrypt, Decrypt and Sign data using Go
.caption por [[https://youtu.be/wf9jVKLRsKo?si=nxoy1RCZzeFjZtlP][Rafael Escrich]]
Chave Publica:
 - Par de chaves, numeros primos(RSA) ou curva eliptica(ECC)
 - Uma chave privada e uma chave Publica
 - Assinar um dado
 - Encriptar um dado


: * Hexagonal, Clean Architecture ou Domain-Driven Design?
